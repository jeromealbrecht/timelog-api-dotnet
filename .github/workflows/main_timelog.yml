# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - Timelog

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "*/10 * * * *"

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_18934B7FE02C4D5AB72502ABB241E0E1 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D7756580E28E4079AD6031991B8A2419 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_047855EFED2546D6B8FAB3D43EB9E627 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "Timelog"
          slot-name: "Production"
          package: .

  keepalive:
    runs-on: ubuntu-latest
    steps:
      - name: Keep API awake
        run: |
          curl --silent --show-error --fail https://timelog-api-dotnet.onrender.com || echo "API non joignable"

  notify_job_offer:
    runs-on: ubuntu-latest
    steps:
      - name: Appeler GPT pour générer une offre d'emploi
        id: generate
        run: |
          response=$(curl -s -X POST https://timelog-api-dotnet.onrender.com/api/OpenAI/chat \
            -H "Content-Type: application/json" \
            -d "{\"message\":\"Génère une offre d'emploi de Développeur Web Junior et ajoute une URL de candidature à la fin, sous la forme 'Lien : https://exemple.com/offre123'\"}")
          echo "Réponse brute de l'API : $response"
          if echo "$response" | jq . > /dev/null 2>&1; then
            echo "GPT_RESPONSE=$response" >> $GITHUB_ENV
          else
            echo "La réponse n'est pas du JSON valide :"
            echo "$response"
            exit 1
          fi

      - name: Extraire le texte de l'offre
        id: extract
        run: |
          offer=$(echo "$GPT_RESPONSE" | jq -r '.response')
          url=$(echo "$offer" | grep -o 'https://[^ ]*')
          echo "Texte de l'offre : $offer"
          echo "JOB_OFFER=$offer" >> $GITHUB_ENV
          echo "JOB_URL=$url" >> $GITHUB_ENV

      - name: Envoyer la notification WhatsApp
        run: |
          curl -s -X POST https://timelog-api-dotnet.onrender.com/api/WhatsAppNotification/send \
            -H "Content-Type: application/json" \
            -d "{\"message\":\"$JOB_OFFER\", \"url\":\"$JOB_URL\"}"
