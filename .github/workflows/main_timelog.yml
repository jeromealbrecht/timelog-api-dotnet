# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - Timelog

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "*/10 * * * *"

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_18934B7FE02C4D5AB72502ABB241E0E1 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D7756580E28E4079AD6031991B8A2419 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_047855EFED2546D6B8FAB3D43EB9E627 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "Timelog"
          slot-name: "Production"
          package: .

  keepalive:
    runs-on: ubuntu-latest
    steps:
      - name: Keep API awake
        run: |
          curl --silent --show-error --fail https://timelog-api-dotnet.onrender.com || echo "API non joignable"

  notify_job_offer:
    runs-on: ubuntu-latest
    env:
      TWILIO_CONTENT_SID: ${{ secrets.TWILIO_CONTENT_SID }}
      ADZUNA_APP_ID: ${{ secrets.ADZUNA_APP_ID }}
      ADZUNA_API_KEY: ${{ secrets.ADZUNA_API_KEY }}
    steps:
      - name: Rechercher une offre sur Adzuna
        id: search
        shell: bash
        env:
          ADZUNA_APP_ID: ${{ secrets.ADZUNA_APP_ID }}
          ADZUNA_API_KEY: ${{ secrets.ADZUNA_API_KEY }}
        run: |
          query="Développeur web junior"
          encoded=$(echo "$query" | jq -s -R -r @uri)
          response=$(curl -s "https://api.adzuna.com/v1/api/jobs/fr/search/1?app_id=$ADZUNA_APP_ID&app_key=$ADZUNA_API_KEY&what=$encoded&results_per_page=1")

          # Vérifier si la réponse est valide
          if ! echo "$response" | jq . > /dev/null 2>&1; then
            echo "Erreur: Réponse Adzuna invalide"
            echo "$response"
            exit 1
          fi

          # Vérifier si des résultats existent
          if [ "$(echo "$response" | jq '.results | length')" -eq 0 ]; then
            echo "Aucune offre trouvée"
            exit 1
          fi

          url=$(echo "$response" | jq -r '.results[0].redirect_url')
          title=$(echo "$response" | jq -r '.results[0].title')

          # Vérifier si l'URL et le titre sont valides
          if [ -z "$url" ] || [ "$url" = "null" ] || [ -z "$title" ] || [ "$title" = "null" ]; then
            echo "Erreur: URL ou titre manquant dans la réponse"
            exit 1
          fi

          echo "JOB_URL=$url" >> $GITHUB_ENV
          echo "JOB_TITLE=$title" >> $GITHUB_ENV

      - name: Appeler GPT pour générer un message
        id: generate
        run: |
          response=$(curl -s -X POST https://timelog-api-dotnet.onrender.com/api/OpenAI/chat \
            -H "Content-Type: application/json" \
            -d "{\"prompt\":\"Crée un message court et attractif pour une offre d'emploi de '$JOB_TITLE'. Inclus l'URL de candidature à la fin. Le message ne doit pas dépasser 1000 caractères.\"}")
          echo "Réponse brute de l'API : $response"
          if echo "$response" | jq . > /dev/null 2>&1; then
            echo "GPT_RESPONSE=$response" >> $GITHUB_ENV
          else
            echo "La réponse n'est pas du JSON valide :"
            echo "$response"
            exit 1
          fi

      - name: Extraire le texte du message
        id: extract
        run: |
          message=$(echo "$GPT_RESPONSE" | jq -r '.response')
          message_clean=$(echo "$message" | tr '\n' ' ' | tr -d '\r' | cut -c1-1000)
          echo "JOB_OFFER=$message_clean" >> $GITHUB_ENV

      - name: Envoyer la notification WhatsApp
        run: |
          curl -s -X POST https://timelog-api-dotnet.onrender.com/api/WhatsAppNotification/send \
            -H "Content-Type: application/json" \
            -d "{\"toNumber\":\"$TO_NUMBER\", \"contentSid\":\"$TWILIO_CONTENT_SID\", \"variables\":{\"1\":\"$JOB_OFFER\", \"2\":\"$JOB_URL\"}}"
        env:
          TO_NUMBER: ${{ secrets.TO_NUMBER }}
          TWILIO_CONTENT_SID: ${{ secrets.TWILIO_CONTENT_SID }}
